<?xml version="1.0" encoding="UTF-8"?>
<!--①xmlns="http://www.springframework.org/schema/beans"，默认命名空间：它没有空间名，用于Spring Bean的定义；-->
<!--②xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"，xsi命名空间：这个命名空间用于为每个文档中命名空间指定相应的Schema样式文件，是标准组织定义的标准命名空间。-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd"
       default-lazy-init="false"
       default-init-method="initMethod"
       default-destroy-method="destroyMethod">
    <!--
    本命名空间中所有bean默认值配置
    default-lazy-init       懒加载，获取bean时才进行实例化
    default-init-method     在实例化 bean 之后，立即调用该方法（如果有就调用，没有就忽略）
    default-destroy-method  从容器中移除 bean 之后，调用该方法（如果有就调用，没有就忽略）
     单个bean配置
    lazy-init       懒加载，获取bean时才进行实例化
    init-method     在实例化 bean 之后，立即调用该方法
    destroy-method  从容器中移除 bean 之后，调用该方法
   -->
    <!--需配置此句，让@PostCostruct注解生效-->
    <context:annotation-config/>
    <bean id="HelloWorld1" class="com.example.demo1ioc.HelloWorld" init-method="initMethod" destroy-method="destroyMethod">
        <property name="message" value="h1_1!"/>
    </bean>
    <bean id="HelloWorld2" class="com.example.demo1ioc.HelloWorld">
        <property name="message" value="h1_2! no lazy"/>
    </bean>
    <bean id="HelloWorld3" lazy-init="true" class="com.example.demo1ioc.HelloWorld">
        <property name="message" value="h1_3! lazy"/>
    </bean>

    <!--配置PostProcess在当前作用域的bean初始化之前之后执行一些方法-->
    <bean class="com.example.demo1ioc.HelloWorldPostProcess"/>

    <!--使用继承的方式将父类中值赋值到当前类-->
    <!--bean的继承：继承一个类。class无继承关系。本类中的属性，将父类中对应属性的值，用作默认值-->
    <bean id="HelloIndia" class="com.example.demo1ioc.HelloIndia" parent="HelloWorld1">
        <!--<property name="message" value="Hello world!"/>-->
        <property name="message1" value="Hello India!"/>
    </bean>
    <bean id="beanTemplate" abstract="true">
        <property name="message" value="Hello world! by beanTemplate"/>
        <property name="message1" value="Hello India! by beanTemplate"/>
    </bean>
    <!--bean的继承：继承一个抽象类。class无继承关系。 -->
    <bean id="HelloIndia1" class="com.example.demo1ioc.HelloIndia" parent="beanTemplate">
        <!--<property name="message" value="Hello world!"/>-->
        <property name="message1" value="Hello India!"/>
    </bean>
</beans>
        <!--
        scope作用域	            描述
        singleton	    在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认。
        prototype	    每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()
        request	        每次HTTP请求都会创建一个新的Bean，                           仅适用于WebApplicationContext环境
        session	        同一个HTTP Session共享一个Bean，不同Session使用不同的Bean      仅适用于WebApplicationContext环境
        global-session	一般用于Portlet应用环境                                     仅适用于WebApplicationContext环境
        -->