server:
  port: 9527

spring:
  application:
    name: springtest-zuul-gateway #若不配置，直接使用module名
  cloud:
    loadbalancer:
      retry:
        enabled: true
eureka:
  client:
    service-url:
      defaultZone: http://etest:123@eureka7001.com:7001/eureka/,http://etest:123@eureka7002.com:7002/eureka/,http://etest:123@eureka7003.com:7003/eureka/
  instance:
    instance-id: gateway9527
    prefer-ip-address: true
zuul: #zuul默认会给所有注册到eureka的微服务，提供以微服务名为基础的访问地址，如http://localhost:9527/testprefix/springtest-dept/**
  semaphore:
   max-semaphores: 5000 #全局最大信号量，即并发最大量，大于此值时返回500
  prefix: /testprefix               #统一公共前缀
 # ignored-services: springtest-dept   #忽略指定微服务名，不提供相应访问地址
  ignored-services: "*"             #忽略所有微服务名，不提供相应访问地址，仅自行配置的routes生效
  routes:
    mydept: #自定义路由类别名称
      serviceId: springtest-dept
      path: /mydept/** #使用自定义路径访问
    #此项目中效果为8001,8002两地址可使用9527地址访问
    #http://localhost:8001/dept/get/1
    #http://localhost:8002/dept/get/1
    #http://localhost:9527/testprefix/mydept/dept/get/1
  retryable: true #zuul重试机制开关

#配置对应服务ID的自定义负载均衡规则：
springtest-dept: #springtest-dept 是微服务名
  ribbon:
    NFLoadBalancerRuleClassName: myrule.RandomRule_Custom1 #myrule.RandomRule_Custom1是规则的全路径
    #  ribbon重试超时时间
    ConnectTimeout: 250
    #  建立连接后的超时时间
    ReadTimeout: 1000
    # 是否所有操作都重试
    # 默认false，设定为false的话，只有get请求会重试，POST请求注意多次提交错误。
    OkToRetryOnAllOperations: false
    #  切换实例的重试次数(这里的切换实例为，使用负载均衡策略取下一个实例，可能取到的是同一个实例)
    MaxAutoRetriesNextServer: 10
    #  对当前实例的重试次数(每个实例第一次访问不算重试，所以设置为0时，每个对象请求1次)
    MaxAutoRetries: 0
    #  需要重试的状态码
    retryableStatusCodes: 404,500,504
    eureka:
      enable: true

### Hystrix 配置
hystrix:
  # 这样将会自动配置一个 Hystrix 并发策略插件的 hook，这个 hook 会将 SecurityContext 从主线程传输到 Hystrix 的命令。
  # 因为 Hystrix 不允许注册多个 Hystrix 策略，所以可以声明 HystrixConcurrencyStrategy
  # 为一个 Spring bean 来实现扩展。Spring Cloud 会在 Spring 的上下文中查找你的实现，并将其包装在自己的插件中。
  shareSecurityContext: true
  command:
    default:
      # 断路器配置
      circuitBreaker:
        # 当在配置时间窗口内达到此数量的失败后，进行断路。默认：20个
        requestVolumeThreshold: 20
        # 出错百分比阈值，当达到此阈值后，开始断路。默认：50%
        errorThresholdpercentage: 50
        # 触发短路的时间值，当该值设为5000时，则当触发 circuit break 后的5000毫秒内都会拒绝request
        # 也就是5000毫秒后才会关闭circuit。默认：5000
        sleepWindowInMilliseconds: 5000
        # 强制打开断路器，如果打开这个开关，那么拒绝所有request，默认false
        forceOpen: false
        # 强制关闭断路器 如果这个开关打开，circuit将一直关闭且忽略，默认false
        forceClosed: false
      execution:
        # 熔断器配置
        isolation:
          thread:
            # 熔断器超时时间，默认：1000/毫秒
            timeoutInMilliseconds: 20000
            # 超时时是否立马中断
            interruptOnTimeout: true
          semaphore:
            # 信号量请求数，当设置为信号量隔离策略时，设置最大允许的请求数
            maxConcurrentRequests: 10
  #        timeout:
  #          # 禁用熔断器超时时间，不推荐
  #          enabled: false
  threadpool:
    defalut:
      # 当使用线程隔离策略时，线程池的核心大小
      coreSize: 10
      # 当 Hystrix 隔离策略为线程池隔离模式时，最大线程池大小的配置，在 `1.5.9` 版本中还需要配置 `allowMaximumSizeToDivergeFromCoreSize` 为 true
      maximumSize: 10
      # 此属性语序配置的 maximumSize 生效
      allowMaximumSizeToDivergeFromCoreSize: true
# Hystrix的超时时间必须大于超时的时间，否则，一旦Hystrix超时，就没办法继续重试了