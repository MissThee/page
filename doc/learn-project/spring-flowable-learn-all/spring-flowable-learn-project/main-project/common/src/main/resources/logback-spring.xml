<?xml version="1.0" encoding="UTF-8"?>
<!-- create by ice 2017-09-20 start -->
<configuration>

    <contextName>SpringBootLogback</contextName>
    <!--自定义日志格式-->
    <property name="CONSOLE" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %easyHighlight(%5.5level) --- [%15.15thread] %cyan(%-40.40logger{39}) : %msg%n"/>
    <property name="PRODUCT" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %5.5level --- [%15.15thread] %-40.40logger{39} : %msg%n"/>
    <!--设置系统日志目录  -->
    <springProperty scope="context" name="logging.file" source="logging.file"/>

    <appender name="FILE_ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logging.file}/log_error.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            	而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${logging.file}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始， 命名日志文件，例如log-error-2017-09-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
                <!--<charset>utf-8</charset>-->
            </layout>
        </encoder>
        <!-- 此日志文件只记录ERROR级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <appender name="FILE_ALL" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logging.file}/log_all.log</file>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 归档的日志文件的路径，例如今天是2017-09-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。
            			而2017-09-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
            <fileNamePattern>${logging.file}/all/log-all-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 除按日志记录之外，还配置了日志文件不能超过2M，若超过2M，日志文件会以索引0开始，  命名日志文件，例如log-error-2017-09-21.0.log -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <!-- 追加方式记录日志 -->
        <append>true</append>
        <!-- 日志文件的格式 -->
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="FILE_REQUEST" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logging.file}/log_debug_request.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logging.file}/request/log-debug-request-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="FILE_MYBATIS1" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logging.file}/log_debug_mybatis1.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logging.file}/mybatis1/log-debug-mybatis1-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="FILE_MYBATIS2" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logging.file}/log_debug_mybatis2.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logging.file}/mybatis2/log-debug-mybatis2-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <append>true</append>
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="CONSOLE_COLOR" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${CONSOLE}</pattern>
            </layout>
        </encoder>
    </appender>
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
            <layout class="com.dic.common.config.log.format.EasyPatternLayout">
                <pattern>${PRODUCT}</pattern>
            </layout>
        </encoder>
    </appender>

    <springProfile name="dev,default">
        <logger name="com.dic" level="debug" additivity="true"/>
        <root level="info">
            <!--控制台输出（彩色）-->
            <appender-ref ref="CONSOLE_COLOR"/>
        </root>
    </springProfile>
    <springProfile name="prod">
        <root level="info">
            <!--文件输出-->
            <appender-ref ref="FILE_ERROR"/>
            <appender-ref ref="FILE_ALL"/>
            <!--控制台输出（原色），若使用docker，可查看实时输出使用-->
            <!--<appender-ref ref="CONSOLE"/>-->
        </root>
        <!--文件输出-->
        <!--additivity是否将日志传递给上级（false：只使用内部appender-ref的方法输出；true：使用内部方法，且将日志内容交至更上级再次输出）-->
        <!--三个logger为分类输出日志，REQUEST请求，MYBATIS1第一数据库，MYBATIS2第二数据库 -->
        <!--若使用下面三个分类输出，level改为debug，name为要输出日志的包。（生产环境不推荐输出大量debug日志） -->
        <logger name="com.dic.common.config.log" level="${logging.level.com.dic.common.config.log:-info}" additivity="true">
            <appender-ref ref="FILE_REQUEST"/>
        </logger>
        <logger name="com.dic.common.db.primary" level="${logging.level.com.dic.missthee.db.primary:-info}" additivity="true">
            <appender-ref ref="FILE_MYBATIS1"/>
        </logger>
        <logger name="com.dic.common.db.secondary" level="${logging.level.com.dic.missthee.db.secondary:-info}" additivity="true">
            <appender-ref ref="FILE_MYBATIS2"/>
        </logger>
    </springProfile>
</configuration>

