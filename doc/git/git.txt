git config --global user.name "Your Name"					设置昵称
git config --global user.email "email@example.com"			设置邮箱	

git init  													创建版本库

git add file.txt											添加文件到仓库
git status													查看当前仓库状态
git commit -m "wrote a readme file"							提交文件到仓库 
git diff file.txt											查看修改内容

git log	 --pretty=oneline									最近到最远的提交日志
git reset --hard HEAD^										退回上一版本   HEAD^上版本  HEAD^^上上版本...  (windows需使用HEAD"^")
git reset --hard 3628164									退回指定版本 	log中查看commit值
																					工作区		add		commit	
git reset --mixed：此为默认方式，不带任何参数的git reset，它回退到某个版本。		保留 		回退	回退
git reset --soft：回退到某个版本。如果还要提交，直接commit即可。					保留		保留	回退
Git reset --hard：彻底回退到某个版本。												回退		回退	回退
git reflog													查看HEAD变动历史
git checkout -- file.txt									撤销修改  优先回到暂存区中状态，否则回到版本库状态
															(1)修改后还没有被放到暂存区，撤销修改回到和版本库的状态	
															(2)已经添加到暂存区后，又作了修改，现在，撤销修改回到添加到暂存区后的状态
															手动删除目录文件后，可用此命令恢复至最后提交的文件
															
git rm file.txt												从版本库中删除文件 （工作区中文件会同时删除）


ssh-keygen -t rsa -C "youremail@example.com"				创建SSH Key    使用Shell(OS)\Git Bash(Win)
															复制id_rsa.pub中的值，添加到git的SSH Keys中 

git remote add ORIGIN git@github.com:USERNAME/EXAMPLE.git	关联远程仓库，取名 ORIGIN(关联多个仓库时需设置不同的名称)
git remote rm ORIGIN										移除ORIGIN远程仓库
git push -u ORIGIN master									把本地库的内容推送到远程库 -u指定origin为默认主机		 
git push ORIGIN master										把本地库的内容推送到远程库
git clone git@github.com:USERNAME/EXAMPLE.git				
															
git checkout -b dev											创建并切换到dev分支
															相当于：git branch dev
																	git checkout dev
git branch													查看当前版本库中已有分支

git merge dev												将dev分支合并到当前所在分支(没有冲突时直接将HEAD指向dev分支最后节点,dev分支将整体作为master的一段)
git merge --no-ff -m "DESCRIPTION" dev						将dev分支最后提交节点与当前分支节点合并成为当前分支的一个新节点

git branch -d dev											删除dev分支（尚未闭合的分支会删除失败）
git branch -D dev											强制删除dev分支）

git log --graph --pretty=oneline --abbrev-commit			查看图形分支记录

git stash													保存工作区内容(不保存暂存区，即add指令添加的文件不记录)
git stash list												查看stash列表
git stash apply												恢复 stash内容并不删除，需要用git stash drop来删除
git stash pop												恢复 stash内容删除
git stash apply stash@{0}									恢复指定的stash
git stash clear												清除stash		

git remote -v												查看远程库的信息
git push origin master										推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上

git tag TAGNAME												将当前节点打上TAGNAME的标签(创建的标签都只存储在本地，不会自动推送到远程)
git tag TAGNAME	7825a50 									将7825a50节点打上TAGNAME的标签
git tag -a TAGNAME -m "DESCRIPTION" 7825a50					将7825a50节点打上说明为DESCRIPTION的标签
git tag -s TAGNAME -m "DESCRIPTION" 7825a50					将7825a50节点打上说明为DESCRIPTION的PGP签名的标签(参考GnuPG帮助文档配置Key)
git tag														查看已有标签
git show TAGNAME											查看标签详情
git tag -d TAGNAME											删除TAGNAME标签

git push origin TAGNAME										推送某个标签到远程
git push origin --tags										推送全部尚未推送到远程的本地标签
git tag -d TAGNAME											删除远程标签(删本地，推送删远程)
 ┗git push origin :refs/tags/TAGNAME

 
git config --global color.ui true							让Git显示颜色
在Git工作区的根目录下创建一个特殊的.gitignore文件，把要忽略的文件名填进去，Git就会自动忽略这些文件。.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理
git add -f File.class										忽视.gitignore，强制添加文件(普通添加时会提示被忽略的文件)
git check-ignore -v File.class								命令检查File.class文件是否被.gitignore忽略
git config --global alias.st status							配置别名 用st 实现status
 例子： git config --global alias.co checkout		co表示checkout
		git config --global alias.ci commit			ci表示commit
		git config --global alias.br branch			br表示branch
		git config --global alias.last 'log -1'		git last就能显示最近一次的提交
		git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"